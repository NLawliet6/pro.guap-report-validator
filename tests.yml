name: Python CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

#防止同时运行多个相同的工作流实例
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: "pip"

    # 安装 Python 依赖（包括 pytest）
    - name: Install Python dependencies
      run: |
        # 尝试安装 requirements.txt
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        elif [ -f "pdf-report-checker/requirements.txt" ]; then
          pip install -r pdf-report-checker/requirements.txt
        else
          # 如果找不到 requirements.txt，直接安装必要包
          pip install pdfplumber flask pytest
        fi
        
        # 确保 pytest 已安装并可执行
        python -m pytest --version || pip install pytest

    - name: Setup PYTHONPATH
      run: echo "PYTHONPATH=${{ github.workspace }}/pdf-report-checker" >> $GITHUB_ENV

    # 使用 Python 模块方式运行 pytest
    - name: Run tests
      run: python -m pytest pdf-report-checker/tests/

  deploy-docs: # 定义名为 "deploy-docs" 的作业
    needs: test                # 指定此作业依赖于 "test" 作业
    runs-on: ubuntu-latest     # 在最新版 Ubuntu 系统上运行
    if: github.ref == 'refs/heads/main'  # 仅当推送/合并到 main 分支时执行
    steps: # 定义执行步骤
      - name: Build documentation  # 步骤1：构建文档
        run: |                   # 执行多行命令
          mkdir _build           # 创建临时构建目录
          echo "Project documentation" > _build/index.html  # 创建占位文档

      - name: Deploy to GitHub Pages  # 步骤2：部署到 GitHub Pages
        uses: peaceiris/actions-gh-pages@v3  # 使用第三方部署工具
        with: # 配置参数
          github_token: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub 自动生成的令牌
          publish_dir: ./_build   # 指定要发布的目录